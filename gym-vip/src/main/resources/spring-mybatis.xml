<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd"
	xmlns:tx="http://www.springframework.org/schema/tx">

	<!--配置jdbc.properties文件的位置信息，路径还是区分大小写 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置写操作数据源 -->
	<bean id="writeDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 数据库连接池配置 -->
		<property name="initialSize" value="3" /><!-- 初始化连接数量 -->
		<property name="maxActive" value="100" /><!-- 最大连接数量 -->
		<property name="maxIdle" value="50" /><!-- 最大空闲连接数量 -->
		<!-- <property name="minIdle" value="10" /> --><!-- 最小空闲连接数量 -->
		<property name="validationQuery" value="select 1 from dual" />
	</bean>

	<!-- 配置读操作数据源 -->
	<bean id="readDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.read.driver}" />
		<property name="url" value="${jdbc.read.url}" />
		<property name="username" value="${jdbc.read.user}" />
		<property name="password" value="${jdbc.read.password}" />
		<!-- 数据库连接池配置 -->
		<property name="initialSize" value="3" /><!-- 初始化连接数量 -->
		<property name="maxActive" value="100" /><!-- 最大连接数量 -->
		<property name="maxIdle" value="50" /><!-- 最大空闲连接数量 -->
		<!-- <property name="minIdle" value="10" /> --><!-- 最小空闲连接数量 -->
		<property name="validationQuery" value="select 1 from dual" />
	</bean>

	<!-- 配置sqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="writeDataSource" />
		<!-- 配置MyBatis全局配置文件:config-mybatis.xml -->
		<property name="configLocation" value="classpath:config-mybatis.xml" />
		<!-- 扫描实体类包，使用别名 -->
		<property name="typeAliasesPackage" value="com.jm.vip.entity"></property>
		<!-- 扫描sql配置文件：mapper需要的xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/jm/vip/mapper/*Mapper.xml"></property>
	</bean>
	<bean id="session" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 只读session工厂 -->
	<bean id="readSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="readDataSource" />
		<!-- 配置MyBatis全局配置文件:config-mybatis.xml -->
		<property name="configLocation" value="classpath:config-mybatis.xml" />
		<!-- 扫描实体类包，使用别名 -->
		<property name="typeAliasesPackage" value="com.jm.vip.entity"></property>
		<!-- 扫描sql配置文件：mapper需要的xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/jm/vip/mapper/*Mapper.xml"></property>
	</bean>
	<bean id="readSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="readSqlSessionFactory" />
	</bean>

	<!-- 事务管理 -->
	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 使用JDBC事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="writeDataSource"></property>
	</bean>
</beans>
